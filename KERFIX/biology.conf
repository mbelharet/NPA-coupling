# Groups

# Number of groups from surface to bottom
# (epipelagic, mesopelagic migratory, mesopelagic non-migratory)
#const int NGROUP = 3;
biology.ngroup = 3

# Activate / deactivate some groups (mostly for debugging purpose)
# A deactivated group will still be part of the model, available for predation but will not feed upon any other group. As a consequence it will quickly collapse.
#const bool ENABLED_GROUPS[] = {1, 1, 1};
biology.group.enabled = 1, 1, 1

# maximum depth at which a group will be found
depth.max = 300., 1000., 1e10

# Trophic interaction
biology.trophic_interaction.file = trophic-interactions.csv


#####################
# Discretization of weight & length space

# Number of weight classes
#const int N_WEIGHT_CLASS = 100;
biology.weight.nclass = 100

# Maximum length [meter]
#const double Lmax = 2.;
biology.length.max = 2., 2., 2.

# Minimum length [meter]
#const double Lmin = 1.0E-5;
biology.length.min = 1.e-5, 1.e-5, 1.e-5

# Log base of the weight & length space
#const double ALPHA = 1.04;
biology.weight.alpha = 1.04, 1.04, 1.04

# Value of the 1st class of the transformed scale
#const double omega_var_MIN = 1.;
biology.weight.omega.min = 1.0

# Increment of the transformed scale
#const double omega_var_STEP = 1.;
biology.weight.omega.incr = 1.

########/
# DEB parameters

# Max surf-area-specific ingestion rate (kg.kg-2/3.jr-1)
#const double OMEGA = 0.06; #0.04716728 #0.085758692 #0.042879346
biology.deb.omega = 0.06, 0.06, 0.06

# Fraction of the ingested energy which is assimilated
#const double eA = .8;
biology.deb.eA = 0.8, 0.8, 0.8

# Fraction of the available energy allocated to growth
#const double K = .65;
biology.deb.K = 0.65, 0.65, 0.65

# Amount of energy required for somatic maint of one unit of weight (J.kg-1.jr-1)
#const double MU = 18100.;
biology.deb.MU = 18100., 18100., 18100.

# Weight specific cost of growth (J.kg-1) 
#const double Eg = 7.E6;
biology.deb.Eg = 7.e6, 7.e6, 7.e6

# Mean energetic content of one unit of biomass (J.kg-1)
#const double PSI = 4.E6;
biology.deb.psi = 4.e6, 4.e6, 4.e6

# Percent of females 
#const double SEX_RATIO = .5;
biology.sexratio = 0.5

# Numerical epsilon that is added every day as egg quantity to allow a group to recover if extinct
#const double EPSILON_REPRO = 1.0E-20;
biology.reproduction.epsilon = 1.e-20

# Allometric relation weight / length such as weight = ALLOM_W_L* length^3
#const double ALLOM_W_L = 15.;
biology.allometric.coeff = 15., 15., 15.

# Fraction of eggs being fecundated ranging from 0 to 1
#const double FEC_EGG = 1.;
biology.fecundated_egg = 1.

############
# Schooling parameters

#const double CRISTAL_SLOPE = 3.;
biology.schooling.slope = 3.

#const double CRISTAL_CRIT = 100.;
biology.schooling.crit = 50.
biology.schooling.crit.flagel = 50. 
biology.schooling.crit.diatoms = 50.
biology.schooling.crit.microzoo = 50.
biology.schooling.crit.mesozoo = 50.
biology.schooling.crit.POM = 10. 

# Disease mortality [day-1]
#const double M_DISEASE = 0.; #.002
biology.mortality.disease = 0., 0., 0.

# Length dependence of disease mortality (disease mort = M_DISEASE/pow(length[i], M_DISEASE_SLOPE))
#const double M_DISEASE_SLOPE = 0.;
biology.mortality.disease.dependence = 0., 0., 0.

##########/
# Thermic parameters

# Mean Arrhenius temperature
#const double Ta = 5020.;
biology.temperature.arrhenius = 5020.

# Reference temperature [Kelvin degree]
#const double Tref = 298.15;
biology.temperature.reference = 298.15

# Mortality outside the thermic ranges
#const double M_therm = 0.005;
biology.mortality.temperature = 0.005

####################
# Selectivity functions predator / prey

# Maximum ratio (length predator) / (length prey)
#const double rho1 = 2.5;
biology.selectivity.ratio.min = 2.5, 2.5, 2.5

# Minimum ration (length predator) / (length prey)
#const double rho2 = 10.;
biology.selectivity.ratio.max = 10., 10., 10.

# Selectivity gradient on rho1
#const double alpha1 = 5.;
biology.selectivity.gradient.min = 5., 5., 5.

# Selectivity gradient on rho2
#const double alpha2 = .2; #.05
biology.selectivity.gradient.max = 0.2, 0.2, 0.2

# The selectivity function defines the range, in size, of preys that are
# accessible to a given predator. It is expressed as conditional probability.
# Predation is the most computational expensive function of the program as it
# contains double embedded loops. One way to reduce the computational cost
# of the predation is to consider that when the probability of a prey to be
# eaten by a predator is lower than a certain value then let's assume that there
# is no predation. OPT_SELECT defines such min value of conditional probability.
 
# Minimum probability of the selectivity function for taking into account the predation 
#const double OPT_SELECT = 0.005; #0.001
biology.selectivity.threshold = 0.005

###########
# Functional response

# Half saturation constant for functional response Holling II x/(c+x)
#const double C_FONCT = 1E-5; #1.
biology.functional_response.half_saturation = 1e-6, 1e-5, 1e-7

# Weight dependence of half saturation constant for Holling II
# C=C_FONCT/(V^C_FONCT_W_DEP), with V the volume searched by predator
#const double C_FONCT_W_DEP = .333;
biology.functional_response.half_saturation.dependence = 0.333, 0.333, 0.333

