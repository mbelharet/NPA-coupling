# Horizontal advection and diffusion

# Diffusivity of an inert particle, nautical_mile^2/day
#const double DIFF_PHYS = 50.;
#movement.diffusion.physical = 50.
# conversion in m2/s by mult. by (1850*1852)/(24*60*60)
movement.diffusion.physical = 1984.898148148148

# Biological diffusivity of an organism of length Lmax, nautical_mile^2/day
# Skipjack: 812.55 max et 1. min (Sibert et al., 1999), 333. (Bertignac et al., 1998)
#const double DIFF = 300.;
#movement.diffusion.biological = 300.
# conversion in m2/s by mult. by (1850*1852)/(24*60*60)
movement.diffusion.biological = 11909.388888888889

# Maximum swimming velocity of an organism of length 1m, nautical_mile/day
# Conversion from m/s to nautical_mile/day
#const double ADV_ACTIV = (1.*3600.*24./1852.);
#movement.swimming.max = 46.65
# barrier.n: conversion from mile/day into m/s
movement.swimming.max = 1.

# Half saturation constant of advection
# f(grad(gamma))=grad(gamma)/(K_ADV*gamma_ref+grad(gamma))
#const double K_ADV = (.1/60);
#movement.advection.half_saturation = 1.667e-3
# barrier.n: K_ADV in mile-1 converted into m-1 (+correction in bad parameter value)
movement.advection.half_saturation = 8.999280057595392e-07

#########/
# Vertical habitat

# Whether temperature preference should be taken into account in the habitat, for every community
#const bool tempprefHabitatEnabled[] = {1, 0, 0};
habitat.temperature_preference.enabled = 1, 0, 0

# Standard deviation of temperature preference for the epipelagic community
#const double SIGM_TCOR[] = {0.1, 0, 0};
habitat.temperature_preference.sigma = 0.1, 0, 0

# Whether limit temperature should be taken into account in the habitat, for every community
#const bool templimHabitatEnabled[] = {0, 0, 0};
habitat.temperature_limit.enabled = 0, 0, 0

# Arhenius temp for high and low temperature limits 
#const double Ta_LIM = 200000.;
habitat.temperature_limit.arrhenius = 200000

# Low temperature limit for every community
#const double T_inf[] = {(-5.+273.15), (-5.+273.15), (-5.+273.15)};
habitat.temperature_limit.min = 268.15, 268.15, 268.15

# High temperature limit for every community
#const double T_sup[] = {(7.+273.15), (7.+273.15), (15.+273.15)};
habitat.temperature_limit.max = 280.15, 280.15, 288.15

# Whether oxygen should be taken into account in the habitat, for every community
#const bool oxygenHabitatEnabled[] = {1, 0, 0};
habitat.oxygen.enabled = 1, 0, 0

# Threshold of [O2] (micromole.l-1) for every community
#const double OXYLIM[] = {1.E-4, 0, 0};
habitat.oxygen.threshold = 1.e-4, 0, 0

# Flatness of the sigmo√Ødal response to [O2] for every community
#const double OXYRESP[] = {1.E5, 0, 0};
habitat.oxygen.response = 1.e5, 0, 0

# Whether light should be taken into account in the habitat, for every community
#const bool lightHabitatEnabled[] = {0, 1, 1};
habitat.light.enabled = 0, 1, 1

# Whether light habitat should distinguish day and night cycles
#const bool sameDayNighLightHabitat[] = {0, 0, 1};
habitat.light.same_day_night = 0, 0, 1

# Optimal light for every community
#const double OPT_LIGHT[] = {1e2, 1.e-3, 8e-4};
habitat.light.optimal = 1.e2, 1.e-3, 8.e-4

# Standard error of light preference for every community
#const double SIGM_LIGHT[] = {1.7e2, 8.e-3, 8.e-3};
habitat.light.sigma = 1.7e2, 8.e-3, 8.e-3

# Proportionality coefficient between light intensity at night and during the day
#const double NIGHT_FACTOR = 1e-6;
habitat.light.night_factor = 1e-6

# Whether light should be taken into account in the functional response
#const bool lightFcREnabled[] = {1, 1, 0};
predation.light.enabled = 1, 1, 0

# Vertical advection for a 1m organism for every community
#const double ADVz[] = {0.5, 0.5, 0.5};
movement.vertical.advection = 0.5, 0.5, 0.5

# Vertical diffusion for a 1m organism for every community
#const double DIFFz[] = {0.6, 0.5, 0.5};
movement.vertical.diffusion = 0.6, 0.5, 0.5

# Vertical diffusivity coefficients (m2.day-1)
#const double DzPHY = 4.E-6;	
movement.vertical.diffusivity = 4.e-6

time.nsteps.growth = 1, 1, 1

